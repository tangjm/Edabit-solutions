/*
Create a function that returns the sum of the two lowest positive numbers given an array of minimum 4 positive integers. No floats or non-positive integers will be passed.
For example, when an array is passed like [19, 5, 42, 2, 77], the output should be 7.
[10, 343445353, 3453445, 3453545353453] should return 3453455.
*/

// Doesn't seem to work for random tests.
function sumTwoSmallestNumbers(numbers) {  
  const minNum = Math.min(...numbers);
  const newNumbers = numbers.filter(number => number > minNum);
  const minNum2 = Math.min(...newNumbers);
  return minNum + minNum2;
}

// Works with numerical sort
function sumTwoSmallestNums(arr) {
  let ans = arr.filter(n => n > 0).sort((a, b) => a - b);
  return ans[0] + ans[1];
}

// Third solution

function sumTwoSmallestNums(arr) {
    // leaves us with Z^+
    let positiveArr = arr.filter(n => n > 0);
    let smallestNum = positiveArr[0];

    // obtains the smallest integer
    for (let i = 0; i < positiveArr.length; i++) {
        if (positiveArr[i] < smallestNum) {
            smallestNum = positiveArr[i];
        }
    }
    // obtains the largest integer
    let largestNum = -1;
    for (let i = 0; i < positiveArr.length; i++) {
        if (positiveArr[i] > smallestNum) {
            largestNum = positiveArr[i];
        }
    }

    let secondSmallestNum = largestNum;

    // if the largest integer == smallest integer, then secondSmallest == smallest
    if (largestNum == -1) {
        secondSmallestNum = smallestNum;
        return smallestNum + secondSmallestNum;
    } 

    // finds elements between the smallest and largest, and updates the new largest element
    // until we reach the second smallest element.
    for (let i = 0; i < positiveArr.length; i++) {
        if (positiveArr[i] > smallestNum && positiveArr[i] < secondSmallestNum) {
            secondSmallestNum = positiveArr[i];
        }
    }
    return smallestNum + secondSmallestNum;
}
